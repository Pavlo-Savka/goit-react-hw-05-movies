{"version":3,"file":"static/js/653.e4e8ed2f.chunk.js","mappings":"8KAEMA,EAAM,mCACNC,EAAU,+BAEDC,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA2BC,EAAUC,GAArC,uFAC2BC,EAAAA,EAAAA,IAAA,UAAaJ,GAAb,OAAuBE,EAAvB,oBAA2CH,GAA3C,OAAiDI,IACnEE,MAAK,SAACC,GAAD,OAAcA,EAASC,IAAvB,IACLC,OAAM,SAACC,GAAD,OAAYA,CAAZ,IAHf,cACUH,EADV,yBAKWA,GALX,kEAOA,IATA,SAE2B,EAAZL,GAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,C,qICJf,GAAiB,E,SC+DjB,EA1De,SAACS,GAAuB,IAAD,EAClC,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAU,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,GAChD,GAA4BC,EAAAA,EAAAA,YAA5B,eAAOC,EAAP,KAAeC,EAAf,KACMhB,EAAQ,gBACRC,EAAW,iBAAaW,IAM9BK,EAAAA,EAAAA,YAAU,WAAM,wCAER,8GAE+BlB,EAAAA,EAAAA,GAAYC,EAAUC,GAFrD,OAEcG,EAFd,OAGQY,EAAUZ,EAASc,SAH3B,gDAMQC,QAAQZ,MAAM,KAAMa,SAN5B,0DAFQ,sBACO,KAAfR,GADQ,mCAWRJ,EACP,GAAE,CAACI,EAAYZ,EAAUC,IAQ1B,OACI,iBAAKoB,UAAWC,EAAAA,UAAhB,WACI,kBACAC,SAVc,SAACC,GAClBA,EAAIC,iBACSD,EAAIE,cAGbC,OACP,EAGM,WAGI,kBACIC,SA9BU,SAAAJ,GACtB,GAAyB,KAArBA,EAAIK,OAAOC,MAAgB,OAAOnB,EAAgB,CAAC,GACvDA,EAAgB,CAAEoB,MAAOP,EAAIK,OAAOC,OACvC,EA4BeE,KAAK,OACLC,KAAK,qBACT,0CAEHlB,IACG,wBACKA,EAAOmB,KAAI,SAACC,GAAD,OACR,yBACI,UAAC,KAAD,CAASC,GAAE,kBAAaD,EAAEE,IAA1B,cAAkCF,EAAEG,mBAD/BH,EAAEE,GADH,QAS/B,C","sources":["API/fetchMovies.jsx","components/Movies/Movies.module.css","components/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst key = 'a911aa07e81ec5a2dc7dd039825bfe81';\nconst baseURL = 'https://api.themoviedb.org/3';\n\nasync function fetchMovies(endpoint, searchQuery) {\n    const response = await axios.get(`${baseURL}${endpoint}?api_key=${key}${searchQuery}`)\n        .then((response) => response.data)\n        .catch((error) => (error));\n    \n    return response;\n}\nexport default fetchMovies ;","// extracted by mini-css-extract-plugin\nexport default {};","import fetchMovies from \"../../API/fetchMovies\";\nimport { useState, useEffect} from \"react\";\nimport { NavLink, useSearchParams } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\nimport css from './Movies.module.css';\n\nconst Movies = (fetchMovieByQuery) => {\n    const [searchParams, setSearchParams] = useSearchParams();\n    const queryParam = searchParams.get('query') ?? \"\";\n    const [movies, setMovies] = useState();\n    const endpoint = `/search/movie`;\n    const searchQuery = `&query=${queryParam}`\n\n    const updateQueryString = evt => {\n        if (evt.target.value === \"\") { return setSearchParams({}) };\n        setSearchParams({ query: evt.target.value })\n    };\n    useEffect(() => {\n        if (queryParam === \"\") return;\n            async function fetchMovieByQuery() {\n                try {\n                    const response = await fetchMovies(endpoint, searchQuery);\n                    setMovies(response.results);\n                }\n                catch (error) {\n                    console.error(error.message);\n                }\n            };\n            fetchMovieByQuery();\n    }, [queryParam, endpoint, searchQuery]);\n     const handleSubmit = (evt) => {\n         evt.preventDefault();\n         const form = evt.currentTarget;\n    //     updateQueryString();\n    //    setSearchParams({ query: evt.target.value });\n        form.reset();\n     };\n    return (\n        <div className={css.container}>\n            <form\n            onSubmit={handleSubmit}\n            >\n                <input\n                    onChange={updateQueryString}\n                    type=\"text\"\n                    name=\"searchQueryForm\" />\n                <button>Search</button>\n            </form>\n            {movies && (\n                <ul>\n                    {movies.map((i) => (\n                        <li key={i.id}>\n                            <NavLink to={`/movies/${i.id}`}> {i.original_title}</NavLink>  \n                        </li>\n                    ))}\n                </ul>\n            )}\n        </div>\n    )\n}\n\nMovies.propTypes = {\n    id: PropTypes.string.isRequired\n};\nexport default Movies;"],"names":["key","baseURL","fetchMovies","endpoint","searchQuery","axios","then","response","data","catch","error","fetchMovieByQuery","useSearchParams","searchParams","setSearchParams","queryParam","get","useState","movies","setMovies","useEffect","results","console","message","className","css","onSubmit","evt","preventDefault","currentTarget","reset","onChange","target","value","query","type","name","map","i","to","id","original_title"],"sourceRoot":""}